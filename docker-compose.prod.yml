version: '3.8'

services:
  # PATH Gateway Service - Production
  path:
    build:
      context: .
      dockerfile: Dockerfile.release
      target: final
    container_name: path-gateway-prod
    ports:
      - "8080:8080"  # Main API port
      - "9090:9090"  # Metrics port
    volumes:
      - ./config:/app/config:ro
      - ./local/path/.config.yaml:/app/.config.yaml:ro
      - path_logs:/app/logs
    environment:
      - CONFIG_PATH=/app/.config.yaml
      - NODE_ENV=production
    depends_on:
      - prometheus
    networks:
      - path-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Prometheus for metrics - Production
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: path-prometheus-prod
    ports:
      - "9091:9090"
    volumes:
      - ./local/observability/prometheus-stack.yaml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=720h'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.no-lockfile'
    networks:
      - path-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Grafana for visualization - Production
  grafana:
    image: grafana/grafana:10.0.3
    container_name: path-grafana-prod
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./local/observability/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./local/observability/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=http://localhost:3000
    networks:
      - path-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Loki for log aggregation - Production
  loki:
    image: grafana/loki:2.9.0
    container_name: path-loki-prod
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./local/observability/loki-config.yaml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - path-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: path-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./local/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./local/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - path
      - grafana
    networks:
      - path-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  path_logs:
    driver: local

networks:
  path-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 